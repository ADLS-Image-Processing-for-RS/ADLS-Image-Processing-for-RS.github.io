# Imagery Data {#sec-imagery-data}

```{r}
#| echo: false

library(readr)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(scales)
library(tibble)
library(gt)

```


:::{.center}
<!-- ![](img/swissimageRS.png){width=60%} -->
:::


---

- The spatial raster data model represents the world with the continuous grid of cells (a.k.a. pixels)
- This data model often refers to so-called regular grids, in which each cell has the same, constant size 
- Through its inherent model this data is naturally fits into the *wide* data structure



:::{#fig-raster}
![](img/raster-intro-plot-1.png)


From @lovelace2019

:::

:::{.callout-note collapse="true"}

We will focus on the regular grids only. However, several other types of grids exist, including rotated, sheared, rectilinear, and curvilinear grids (see Chapter 1 of @edzer2023).

:::


---

## Types of raster data

- Raster datasets usually represent continuous phenomena such as elevation, temperature, population density or spectral data. 
- Discrete features such as soil or land-cover classes can also be represented in the raster data model



## Elevation

```{r}

library(terra)
library(sf)
library(tmap)
library(dplyr)

r <- rast(system.file("ex/elev.tif", package="terra"))

tm_shape(r) + 
  tm_raster(style = "cont",palette = "viridis") +
  tm_layout(frame = FALSE,legend.position = c("center","BOTTOM"),legend.outside = TRUE)

```

```{r}
matrix(r, nrow = terra::nrow(r))[50:60,50:60]

```


## Spectral data

- Typically, RS imagery consists of more than 1 band
- In this case, the data is stored in a 3 dimensional *array* (where *band* is the 3rd-dimesion)





```{r}
l7 <- system.file("tif/L7_ETMs.tif",package = "stars") |> 
    rast() 

l7_full <- l7  

l7_full_rgb <- l7_full[[c(3,2,1)]]

l7 <- l7 |>   aggregate(20, na.rm = TRUE) |> as.int()


l7_rgb <- l7[[c(3,2,1)]]

``` 


```{r}
#| label: fig-multi
#| layout-ncol: 2
#| fig-cap: 
#|   - The RGB Composite
#|   - The bands stored internally

plotRGB(l7_full_rgb, stretch = "histogramm", smooth = FALSE)


plot(l7_full_rgb, main = paste(c("Red", "Green", "Blue"),"Band"))

```



## Each band is a matrix

```{r}

l7_rgb_array <- as.array(l7_rgb)


ou <- capture.output(l7_rgb_array[1:5, 1:5, , drop = F])

l7_rgb_df <- as.data.frame(l7_rgb, xy = TRUE)

colnames(l7_rgb_df)[3:5] <- paste0("L7_",c("red","green","blue"))

# l7_rgb_df <- l7_rgb_df |> 
#     mutate(across(starts_with("L7_"), as.integer))

dims <- dim(l7_rgb_array)

asp <- dims[3]/(dims[1]/dims[1])

l7_rgb_df_wide <- l7_rgb_df |> 
    pivot_longer(starts_with("L7"), names_prefix = "L7_")
```

::::{layout="[[20,-5, 75],[20,-5, 75],[20,-5, 75]]" .smaller-fonts}



```{r}
#| fig.asp = 1



spectral <- RColorBrewer::brewer.pal(11, "Spectral") |> rev()

l7_rgb_df |> 
ggplot(aes(x,y, fill = L7_red)) +
    geom_tile(color = "white", lwd = .2) +
    coord_equal() +
    theme_void() +
    scale_fill_gradientn(colors = spectral) +
    theme(legend.position = "none")
```

```{r}
cat(ou[1:8], sep = "\n")
```


```{r}
#| fig.asp = 1

l7_rgb_df |> 
ggplot(aes(x,y, fill = L7_green)) +
    geom_tile(color = "white", lwd = .2) +
    coord_equal() +
    theme_void() +
    scale_fill_gradientn(colors = spectral) +
    theme(legend.position = "none") 
```

```{r}
cat(ou[10:17], sep = "\n")
```

```{r}
#| fig.asp = 1

l7_rgb_df |> 
ggplot(aes(x,y, fill = L7_blue)) +
    geom_tile(color = "white", lwd = .2) +
    coord_equal() +
    theme_void() +
    scale_fill_gradientn(colors = spectral) +
    theme(legend.position = "none") 
```

```{r}
cat(ou[19:27], sep = "\n")
```
::::


## Multispectral Datasets

- Multiband datasets usually capture different parts of the EM spectrum
- E.g. the Landsat image (previous example) has 8 bands capturing the following wavelengths:
  - **Band 1**: Blue (0.45 - 0.52 µm)
  - **Band 2**: Green (0.52 - 0.60 µm)
  - **Band 3**: Red (0.63 - 0.69 µm)
  - **Band 4**: Near-Infrared (0.77 - 0.90 µm)
  - **Band 5**: Short-wave Infrared (1.55 - 1.75 µm)
  - **Band 7**: Mid-Infrared (2.08 - 2.35 µm)


## Representations of multispectral data

- A *true color* image is created by using the Red (3), Green (2) and Blue (1) Band and mapping these to RGB
- A *false color* image is created by mapping other bands to RGB


```{r}
#| label: fig-rgb-nirgb
#| layout-ncol: 2
#| fig-cap:
#|   - The R, G and B bands mapped to RGB
#|   - NIR, G and B bands mapped to RGB

plotRGB(l7_full[[c(3,2,1)]], stretch = "histogramm", smooth = FALSE)


plotRGB(l7_full[[c(4,3,2)]], stretch = "histogramm", smooth = FALSE)

```



## Tasks / Exercises


1. The following command returns the path to a tif file on your hard drive:

   ```{r}
   #| eval: false
   #| echo: true
   system.file("ex/elev.tif", package="terra")
   ```
   
   Use this path to import the tif file using `rast()`, store it as `r`.
   
2. Explore this object:
   - Determine the minimum and maximum eleveation values
   - Make a static map using base plot and `tmap`
   - Make an interactive map using tmap (`tmap_mode("view")`)
   - Using tmap, explore different [styles](https://r-tmap.github.io/tmap/reference/tm_raster.html#arg-style) and [palettes](https://r-tmap.github.io/tmap/reference/tm_raster.html#arg-palette). 
   
3. The following command returns the path to a tif file on your hard drive:

   ```{r}
   #| eval: false
   #| echo: true
   system.file("tif/L7_ETMs.tif",package = "stars")
   ```
   Use this path to import the tif file using `rast()`, store it as `l7`.

   
4. Explore this object:
   - Spot the differences to the object `r`
   - Plot the available layers individually
   - Rename the layers to: `c("B", "G", "R", "NIR", "SWIR", "MIR")` (see [here](https://r-spatial.github.io/stars/reference/L7_ETMs.html))


5. Select the Red Green and Blue bands to create a true color map (`plotRGB` and `tm_rgb`)

```{r}

l7 <- l7_full
names(l7) <- c("B", "G", "R", "NIR", "SWIR", "MIR")


```

6. Select the NIR, Green and Blue bands to create a false color composite

```{r}
#| eval: false


tm_shape(l7[[c("NIR","G","B")]]) + tm_rgb()

```



 

