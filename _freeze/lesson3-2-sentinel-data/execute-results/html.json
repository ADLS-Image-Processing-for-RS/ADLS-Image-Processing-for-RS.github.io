{
  "hash": "d12b7e269122c0c177f1a91c001e4941",
  "result": {
    "engine": "knitr",
    "markdown": "---\necho: true\n---\n\n\n\n\n\n# Showcase: Importing Sentinel data\n\n## Download data\n\nTo download Sentinel data:\n\n1. Go to the [Copernicus Browser](https://browser.dataspace.copernicus.eu/) website\n2. Login using your credentials\n3. Go to your area of interest\n4. Click on the \"Search\" Tab in the left panel\n5. In Data Source, select *Sentinel 2* → *L2A*\n6. Choose your desired time frame\n7. Click on the \"Search\" button\n8. From the search results, download one or two scenes\n\n\n## Copernicus SAFE Format I\n\n\n- Sentinel 2 data is provided in SAFE format. This is a zipped file that contains the data in separate JP2 files\n- The Sentinel-SAFE format wraps a folder containing image data in a binary data format and product metadata in XML. \n- This includes:\n  - A 'manifest.safe' file which holds the general product information in XML.\n  - Subfolders for measurement datasets containing image data in various binary formats.\n  - A preview folder containing 'quicklooks' in PNG format, Google Earth overlays in KML format and HTML preview files.\n  - An annotation folder containing the product metadata in XML as well as calibration data.\n  - A support folder containing the XML schemes describing the product XML.\n\n\n\n## Copernicus SAFE Format II\n\nThe SAFE folder above includes the following content:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                     levelName\n1  data-large                                                                 \n2   °--S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207.SAFE      \n3       ¦--DATASTRIP                                                          \n4       ¦   °--DS_2BPS_20240915T131207_S20240915T102803                       \n5       ¦       ¦--MTD_DS.xml                                                 \n6       ¦       °--QI_DATA                                                    \n7       ¦           ¦--FORMAT_CORRECTNESS.xml                                 \n8       ¦           ¦--GENERAL_QUALITY.xml                                    \n9       ¦           ¦--GEOMETRIC_QUALITY.xml                                  \n10      ¦           ¦--RADIOMETRIC_QUALITY.xml                                \n11      ¦           °--SENSOR_QUALITY.xml                                     \n12      ¦--GRANULE                                                            \n13      ¦   °--L2A_T32TMS_A039316_20240915T102803                             \n14      ¦       ¦--AUX_DATA                                                   \n15      ¦       ¦   ¦--AUX_CAMSFO                                             \n16      ¦       ¦   °--AUX_ECMWFT                                             \n17      ¦       ¦--IMG_DATA                                                   \n18      ¦       ¦   ¦--R10m                                                   \n19      ¦       ¦   ¦   ¦--T32TMS_20240915T102559_AOT_10m.jp2                 \n20      ¦       ¦   ¦   ¦--T32TMS_20240915T102559_B02_10m.jp2                 \n21      ¦       ¦   ¦   °--... (etc)                                          \n22      ¦       ¦   ¦--R20m                                                   \n23      ¦       ¦   ¦   ¦--T32TMS_20240915T102559_AOT_20m.jp2                 \n24      ¦       ¦   ¦   ¦--T32TMS_20240915T102559_B01_20m.jp2                 \n25      ¦       ¦   ¦   °--... (etc)                                          \n26      ¦       ¦   °--R60m                                                   \n27      ¦       ¦       ¦--T32TMS_20240915T102559_AOT_60m.jp2                 \n28      ¦       ¦       ¦--T32TMS_20240915T102559_B01_60m.jp2                 \n29      ¦       ¦       °--... (etc)                                          \n30      ¦       ¦--MTD_TL.xml                                                 \n31      ¦       °--QI_DATA                                                    \n32      ¦           ¦--FORMAT_CORRECTNESS.xml                                 \n33      ¦           ¦--GENERAL_QUALITY.xml                                    \n34      ¦           ¦--GEOMETRIC_QUALITY.xml                                  \n35      ¦           ¦--L2A_QUALITY.xml                                        \n36      ¦           ¦--MSK_CLASSI_B00.jp2                                     \n37      ¦           ¦--MSK_CLDPRB_20m.jp2                                     \n38      ¦           ¦--MSK_CLDPRB_60m.jp2                                     \n39      ¦           ¦--MSK_DETFOO_B01.jp2                                     \n40      ¦           ¦--MSK_DETFOO_B02.jp2                                     \n41      ¦           ¦--... (etc)                                              \n42      ¦           ¦--MSK_QUALIT_B01.jp2                                     \n43      ¦           ¦--MSK_QUALIT_B02.jp2                                     \n44      ¦           ¦--MSK_SNWPRB_20m.jp2                                     \n45      ¦           ¦--MSK_SNWPRB_60m.jp2                                     \n46      ¦           ¦--SENSOR_QUALITY.xml                                     \n47      ¦           °--T32TMS_20240915T102559_PVI.jp2                         \n48      ¦--HTML                                                               \n49      ¦   ¦--banner_1.png                                                   \n50      ¦   ¦--banner_2.png                                                   \n51      ¦   ¦--banner_3.png                                                   \n52      ¦   ¦--star_bg.jpg                                                    \n53      ¦   ¦--UserProduct_index.html                                         \n54      ¦   °--UserProduct_index.xsl                                          \n55      ¦--INSPIRE.xml                                                        \n56      ¦--manifest.safe                                                      \n57      ¦--MTD_MSIL2A.xml                                                     \n58      ¦--rep_info                                                           \n59      ¦   ¦--S2_PDI_Level-2A_Datastrip_Metadata.xsd                         \n60      ¦   ¦--S2_PDI_Level-2A_Tile_Metadata.xsd                              \n61      ¦   °--S2_User_Product_Level-2A_Metadata.xsd                          \n62      °--S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207-ql.jpg\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe data we are interested in is in the `IMG_DATA` folder. This folder contains the data in three different resolutions, where each band is a separate file *jp2* File. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(dplyr)\n\ns2_files <- list.files(\"data-large/S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207.SAFE/GRANULE/L2A_T32TMS_A039316_20240915T102803/IMG_DATA/R60m/\", \"\\\\.jp2$\", full.names = TRUE)\n```\n:::\n\n\n\n\n\n\n- We can import all `jp2` files into a `rast` object in a singe `rast()` command. \n- Before we do this, let's filter the data for the bands we are interested in (`B01`...`B12`)\n- To add reasonable `names` to the SpatRaster object, we can use `str_split_fixed` to extract the relevant information from the file names.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\n# selecting only the bands we are interested in:\ns2_files <- s2_files[str_detect(s2_files, \"B\\\\d{2}\")]\n\ns2 <- rast(s2_files)\n\n# Extracting the band names from the file names and adding these\nnames(s2) <- str_split_fixed(names(s2), \"_\",4)[,3]\n\nnames(s2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"B01\" \"B02\" \"B03\" \"B04\" \"B05\" \"B06\" \"B07\" \"B09\" \"B11\" \"B12\"\n```\n\n\n:::\n:::\n\n\n\n\n\n- Test if the data is loaded correctly:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(s2[[1]])\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n- Note how the values range from 0 to > 15000. It seems that the values are not scaled yet (see @sec-data-types)\n- If `scale` and `offset` values were set using `GDAL` flags, `terra` would automatically apply these values\n- However, it seems that we have to apply these values manually: [this website](https://sentinel.esa.int/en/web/sentinel/technical-guides/sentinel-2-msi/level-1c/product-formatting), writes the following:\n\n> The transformation of reflectances in 16 bit integers is performed according to the following equation:\n> $$\\text{L1C\\_DN} = \\rho \\times \\text{QUANTIFICATION\\_VALUE} - \\text{RADIO\\_ADD\\_OFFSET}$$\n> The L1C product's metadata includes the values for the QUANTIFICATION_VALUE and RADIO_ADD_OFFSET.\n\n- This information is stored in the file `MTD_MSIL2A.xml`:\n- This file contains information about the bands, the scale factor, and the offset values. \n- If we search for `QUANTIFICATION_VALUE`, we find the following information:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n            <QUANTIFICATION_VALUES_LIST>\n                <BOA_QUANTIFICATION_VALUE unit=\"none\">10000</BOA_QUANTIFICATION_VALUE>\n                <AOT_QUANTIFICATION_VALUE unit=\"none\">1000.0</AOT_QUANTIFICATION_VALUE>\n                <WVP_QUANTIFICATION_VALUE unit=\"cm\">1000.0</WVP_QUANTIFICATION_VALUE>\n            </QUANTIFICATION_VALUES_LIST>\n```\n\n\n:::\n:::\n\n\n\n\n\n- If we search for `ADD_OFFSET`, we find the following information:\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n            <BOA_ADD_OFFSET_VALUES_LIST>\n        <BOA_ADD_OFFSET band_id=\"0\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"1\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"2\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"3\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"4\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"5\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"6\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"7\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"8\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"9\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"10\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"11\">-1000</BOA_ADD_OFFSET>\n        <BOA_ADD_OFFSET band_id=\"12\">-1000</BOA_ADD_OFFSET>\n      </BOA_ADD_OFFSET_VALUES_LIST>\n```\n\n\n:::\n:::\n\n\n\n\n\n<!-- this does not work, since I would need offset to be added first, and then scale (?) -->\n<!-- - Rather than manually converting our data to reflectance values, we can use the function `scoff` -->\n<!-- - This function takes a *two-column matrix with scale (first column) and offset (second column) for each layer* -->\n<!-- - `scale` and `offset` are applied to the original values as follows: -->\n\n<!--   > `value <- value * scale + offset` -->\n\n- We can now use the `scale` (10'000) and `offset` (-1'000) values to convert the data to reflectance values. \n- We can then use `hist` to get a histogram of the values in each band\n- Note that most bands have values > 1. \n  - We have to decide how to handle these values\n  - One option is to simply clip the values to the desired range\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns2b <- (s2 - 1000)/10000\n\nhist(s2b)\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to clip values to the desired range\nforce_minmax <- \\(x, min = 0, max = 1){\n  x[x<min] <- min\n  x[x>max] <- max\n  x\n}\n```\n:::\n\n\n\n\n\nTo apply this function to all bands, we can use the `app` function. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns2c <- app(s2b, force_minmax)\n\n# If we now check the min/max values, we see that all values are between 0 and 1\nminmax(s2c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    B01 B02 B03 B04 B05 B06 B07 B09 B11 B12\nmin   0   0   0   0   0   0   0   0   0   0\nmax   1   1   1   1   1   1   1   1   1   1\n```\n\n\n:::\n:::\n\n\n\n\n\nTo test if we processed the data correctly, let's create a True Color image using the bands `B04`, `B03`, and `B02`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotRGB(s2c,r = 4, g = 3, b = 2, stretch = \"histogram\", smooth = FALSE)\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# To export the R,G,B bands to a True Color Geotiff: \nwriteRaster(s2c[[c(4,3,2)]], \"data-out/sentinel-rgb.tif\", overwrite = TRUE)\n```\n:::\n\n\n\n\n\n\nTo calculate NDVI, we can create our custom function and apply it to the `s2c` object using `app`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- \\(x){(x[5]-x[4])/(x[5]+x[4])}\n\ns2_ndvi <- app(s2c, ndvi)\n\nlibrary(tmap)\ntm_shape(s2_ndvi) + \n  tm_raster(style = \"cont\",midpoint = 0) + \n  tm_layout(legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "lesson3-2-sentinel-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}