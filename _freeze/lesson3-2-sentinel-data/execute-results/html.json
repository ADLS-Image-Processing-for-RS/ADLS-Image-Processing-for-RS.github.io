{
  "hash": "4bfea7625f651b118574193c8359e8f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\necho: true\n---\n\n\n\n# Showcase: Importing Sentinel data\n\n- Sentinel 2 data is provided in SAFE format. This is a zipped file that contains the data in separate JP2 files\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(dplyr)\n\ns2_files <- list.files(\"data-large/S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207.SAFE/GRANULE/L2A_T32TMS_A039316_20240915T102803/IMG_DATA/R60m/\", \"\\\\.jp2$\", full.names = TRUE)\n```\n:::\n\n\n\n\nThe folder above includes the following content:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                               levelName\n1  data-large                                                           \n2   °--S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207.SAFE\n3       °--GRANULE                                                      \n4           °--L2A_T32TMS_A039316_20240915T102803                       \n5               °--IMG_DATA                                             \n6                   °--R60m                                             \n7                       ¦--T32TMS_20240915T102559_AOT_60m.jp2           \n8                       ¦--T32TMS_20240915T102559_B01_60m.jp2           \n9                       ¦--T32TMS_20240915T102559_B02_60m.jp2           \n10                      ¦--T32TMS_20240915T102559_B03_60m.jp2           \n11                      ¦--T32TMS_20240915T102559_B04_60m.jp2           \n12                      ¦--T32TMS_20240915T102559_B05_60m.jp2           \n13                      ¦--T32TMS_20240915T102559_B06_60m.jp2           \n14                      ¦--T32TMS_20240915T102559_B07_60m.jp2           \n15                      ¦--T32TMS_20240915T102559_B09_60m.jp2           \n16                      ¦--T32TMS_20240915T102559_B11_60m.jp2           \n17                      ¦--T32TMS_20240915T102559_B12_60m.jp2           \n18                      ¦--T32TMS_20240915T102559_B8A_60m.jp2           \n19                      ¦--T32TMS_20240915T102559_SCL_60m.jp2           \n20                      ¦--T32TMS_20240915T102559_TCI_60m.jp2           \n21                      °--T32TMS_20240915T102559_WVP_60m.jp2           \n```\n\n\n:::\n:::\n\n\n\n\nWe can import all `jp2` files into a `rast` object. To add reasonable `names` to the SpatRaster object, we can use `str_split_fixed` to extract the relevant information from the file names.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\ns2 <- rast(s2_files)\n\nnames(s2) <- str_split_fixed(names(s2), \"_\",4)[,3]\n\nnames(s2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"AOT\" \"B01\" \"B02\" \"B03\" \"B04\" \"B05\" \"B06\" \"B07\" \"B09\" \"B11\" \"B12\" \"B8A\"\n[13] \"SCL\" \"TCI\" \"TCI\" \"TCI\" \"WVP\"\n```\n\n\n:::\n:::\n\n\n\n\n\nFor now, we will only use B01 to B12. We can select these bands by using the `[[` operator. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel <- names(s2) %in% paste0(\"B\",str_pad(1:12,2,pad = \"0\"))\n\ns2_sel <- s2[[sel]]\n```\n:::\n\n\n\n\n\nFurther metadata can be extracted from the `MTD_MSIL2A.xml` file. This file contains information about the bands, the scale factor, and the offset values. Here we use `xml2` and `rvest` to extract the relevant information programmatically. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\nlibrary(rvest)\n\nmetadata <- read_xml(\"data-large/S2B_MSIL2A_20240915T102559_N0511_R108_T32TMS_20240915T131207.SAFE/MTD_MSIL2A.xml\") \n\nscale_val <- metadata |> \n  html_node(xpath = \"//BOA_QUANTIFICATION_VALUE\")|> \n  html_text() |> \n  as.numeric()\n\n\n\noffset_val <- metadata |> \n  html_node(xpath = \"//BOA_ADD_OFFSET_VALUES_LIST\") |> \n  html_children() |> \n  html_text() |> \n  as.numeric()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Since all bands have the same scale and offset values, we can apply these to all bands\ns2b <- (s2_sel+ unique(offset_val))/scale_val\n```\n:::\n\n\n\n\nNow that the values are rescaled, they should range between 0 and 1. We can use the `global` function to check this: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal(s2b, c(\"min\",\"max\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     min    max\nB01 -0.1 1.8709\nB02 -0.1 1.8020\nB03 -0.1 1.7195\nB04 -0.1 1.6616\nB05 -0.1 1.6448\nB06 -0.1 1.6102\nB07 -0.1 1.5940\nB09 -0.1 1.5730\nB11 -0.1 1.5258\nB12 -0.1 1.5155\n```\n\n\n:::\n:::\n\n\n\n\nWe can see that the values are not within the desired range. We now have to decide how to handle these values. One option is to simply clip the values to the desired range with the function below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforce_minmax <- \\(x, min = 0, max = 1){\n  x[x<min] <- min\n  x[x>max] <- max\n  x\n}\n```\n:::\n\n\n\n\nTo apply this function to all bands, we can use the `app` function. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns2c <- app(s2b, force_minmax)\n\nglobal(s2c, c(\"min\",\"max\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    min max\nB01   0   1\nB02   0   1\nB03   0   1\nB04   0   1\nB05   0   1\nB06   0   1\nB07   0   1\nB09   0   1\nB11   0   1\nB12   0   1\n```\n\n\n:::\n:::\n\n\n\n\nLet's create a True Color image using the bands B05, B03, and B02. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotRGB(s2c,r = 5, g = 3, b = 2, stretch = \"histogram\", smooth = FALSE)\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nTo calculate NDVI, we can create our custom function and apply it to the `s2c` object using `app`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- \\(x){(x[5]-x[4])/(x[5]+x[4])}\n\ns2_ndvi <- app(s2c, ndvi)\n\n\nlibrary(tmap)\ntm_shape(s2_ndvi) + \n  tm_raster(style = \"cont\",midpoint = 0) + \n  tm_layout(legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](lesson3-2-sentinel-data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "lesson3-2-sentinel-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}