# Imagery Data {#sec-imagery-data}

```{r}
#| echo: false

library(readr)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(scales)
library(tibble)
library(gt)

```



## Images are Rasters

- The spatial raster data model represents the world with the continuous grid of cells (a.k.a. pixels)
- This data model often refers to so-called regular grids, in which each cell has the same, constant size
- Through its inherent model, this data naturally fits into the *wide* data structure

:::{.notes}
- This connects directly to the previous lesson on wide vs long data
- Emphasize that raster data is inherently a grid/matrix structure
- Each pixel has a fixed location - this is why wide format makes sense
- Regular grids are the foundation of most remote sensing data
- We will focus on the regular grids only. However, several other types of grids exist, including rotated, sheared, rectilinear, and curvilinear grids (see Chapter 1 of @edzer2023).

:::



```{r}
#| echo: false
#| code-fold: false
#| label: fig-raster-example
#| layout-nrow: 1
#| column: page
#| fig-cap: 
#|   - Cell offset from origin (lower left)
#|   - Cell values (for example elevation)
#|   - Color representation of cell value 


scale_minmax <- \(x){(x-min(x))/(max(x)-min(x))}
library(ambient)

grid_size <- 5

df <-expand_grid(x = seq_len(grid_size), y = seq_len(grid_size)) |> 
  mutate(z = gen_perlin(x,y,frequency = .1,seed = 1)) |> 
  mutate(z = as.integer(round(scale_minmax(z)*10)))

p0 <- df |> 
ggplot(aes(x,y)) + 
    geom_tile(fill = "white", color = "black",lwd = .4) +
  scale_fill_gradientn(colors = RColorBrewer::brewer.pal(11, "Spectral")) +
  theme_void() +
  theme(legend.position = "none") +
  coord_equal()

library(glue)

p0 +
  geom_text(aes(label = glue("[{x-1},{y-1}]")))

p0 +
  geom_text(aes(label = z)) 


p0 + 
  geom_tile(aes(fill = z), color = "black",lwd = .4)


```





## Types of raster data

- Raster datasets usually represent continuous phenomena such as elevation, temperature, population density or spectral data.
- Discrete features such as soil or land-cover classes can also be represented in the raster data model


:::{.notes}
- Distinguish between continuous (elevation, temperature) and discrete (land cover classes) data
- Both can be stored in raster format, but analysis approaches differ
- Most remote sensing applications deal with continuous spectral values
- Discrete classifications often result from processing continuous data
:::


```{r}
#| echo: false

library(terra)
library(sf)
library(tmap)
library(dplyr)

r <- rast(system.file("ex/elev.tif", package="terra"))

f <- system.file("ex/lux.shp", package="terra")
v <- vect(f)
zones <- rasterize(v, r, "NAME_2")
```

```{r}
#| echo: false
#| code-fold: false
#| layout-ncol: 2
#| column: page
#| fig-subcap: 
#|  - A continuous raster with the elevation of Luxembourg
#|  - A discrete raster with the municipalities of Luxembourg

plot(r)

plot(zones)
```


## A simple example: Elevation

::::{.columns}

::: {.column width="50%"}
```{r}
#| echo: false
#| code-fold: false


tm_shape(r) + 
  tm_raster(style = "cont",palette = "viridis") +
  tm_layout(frame = FALSE,legend.show = FALSE)

```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| code-fold: false

matrix(r, nrow = terra::nrow(r))[50:60,50:55]
```
:::

::::






## A more complex example: Spectral data

- Typically, RS imagery consists of more than 1 band
- In this case, the data is stored in a 3 dimensional *array* (where *band* is the 3rd-dimension)
- A RS image can contain any number of bands.
- The most well known type of RS imagery consists of 3 Bands from the red, blue and green spectrum

:::{.notes}
- Move from 2D (single band) to 3D (multi-band) concept
- Each band captures different wavelengths of electromagnetic spectrum
- RGB is familiar to students - good starting point
- Modern satellites can have hundreds of bands (hyperspectral)
:::



```{r}
#| echo: false

l7 <- system.file("tif/L7_ETMs.tif",package = "stars") |> 
    rast() 


l7_full <- l7  

l7_full_rgb <- l7_full[[c(3,2,1)]]


``` 


```{r}
#| label: fig-multi
#| layout-ncol: 2
#| column: page
#| fig-cap: 
#|   - The bands stored internally
#|   - The RGB Composite
#| echo: false

plot(l7_full_rgb, main = paste(c("Red", "Green", "Blue"),"Band"))

plotRGB(l7_full_rgb, stretch = "histogram", smooth = FALSE)


```



## Each band is a 2D matrix


```{r}
#| fig.asp: 1
#| layout-nrow: 1
#| fig-height: 5
#| column: page
#| label: fig-raster-composite
#| fig-cap: 
#|   - Band values
#|   - RGB True Color Image
#| echo: false


l7 <- l7 |>   aggregate(60, na.rm = TRUE) |> as.int()

spectral <- RColorBrewer::brewer.pal(11, "Spectral") |> rev()


l7_rgb <- l7[[c(3,2,1)]]

l7_rgb_df <- as.data.frame(l7_rgb, xy = TRUE)

colnames(l7_rgb_df)[3:5] <- paste0("L7_",c("red","green","blue"))



df2 <- l7_rgb_df |> 
  pivot_longer(cols = starts_with("L7_"),names_prefix = "L7_") |> 
  mutate(name = factor(name, levels = c("red","green","blue"),ordered = TRUE))

  q0 <- df2 |> 
  ggplot(aes(x,y)) +
    geom_tile(color = "black", fill = NA) +
    coord_equal() +
    theme_void() +
    scale_fill_gradientn(colors = spectral) +
    theme(legend.position = "none")+
    facet_wrap(~name, ncol = 1)

q0 + 
  geom_text(aes(label = value))

# q0 + 
  # geom_tile(aes(fill = value), color = "black", lwd = .2)


df2 |> 
  pivot_wider() |> 
  mutate(fill = rgb(red, green, blue,maxColorValue = max(df2$value))) |> 
  ggplot(aes(x,y)) +
  geom_tile(aes(fill = fill)) +
  scale_fill_identity() +
    coord_equal() +
    theme_void() +
    theme(legend.position = "none")
    

```



## Multispectral Datasets

- Multiband datasets usually capture different parts of the EM spectrum
- E.g. the Landsat image from the previous example has 6 bands capturing the following wavelengths:
  - **Band 1**: Blue (0.45 - 0.52 µm)
  - **Band 2**: Green (0.52 - 0.60 µm)
  - **Band 3**: Red (0.63 - 0.69 µm)
  - **Band 4**: Near-Infrared (0.77 - 0.90 µm)
  - **Band 5**: Short-wave Infrared (1.55 - 1.75 µm)
  - **Band 7**: Mid-Infrared (2.08 - 2.35 µm)

:::{.notes}
- Point out that Band 6 (thermal) is missing from this list - was not included in this dataset
- Each band serves different purposes: visible for true color, NIR for vegetation health, SWIR for moisture
- These wavelength ranges are carefully chosen based on atmospheric windows and target phenomena
- Students will learn to use different band combinations for different applications
:::


## NirGB Image

```{r}
#| layout-nrow: 1
#| label: fig-nirgb
#| column: page
#| fig-cap: 
#|   - Band values
#|   - NIR-GB False Color Image
#| echo: false

l7_nirgb <- l7[[c(4,2,1)]]

l7_nirgb_df <- as.data.frame(l7_nirgb, xy = TRUE)

colnames(l7_nirgb_df)[3:5] <- paste0("L7_",c("NIR","green","blue"))



df2 <- l7_nirgb_df |> 
  pivot_longer(cols = starts_with("L7_"),names_prefix = "L7_") |> 
  mutate(name = factor(name, levels = c("NIR","green","blue"),ordered = TRUE))

q0 <- df2 |> 
  ggplot(aes(x,y)) +
    geom_tile(color = "black", fill = NA) +
    coord_equal() +
    theme_void() +
    scale_fill_gradientn(colors = spectral) +
    theme(legend.position = "none")+
    facet_wrap(~name, ncol = 1)

q0 + 
  geom_text(aes(label = value))

# q0 + 
  # geom_tile(aes(fill = value), color = "black", lwd = .2)


df2 |> 
  pivot_wider() |> 
  mutate(fill = rgb(NIR, green, blue,maxColorValue = max(df2$value))) |> 
  ggplot(aes(x,y)) +
  geom_tile(aes(fill = fill)) +
  scale_fill_identity() +
    coord_equal() +
    theme_void() +
    theme(legend.position = "none")
    

```



## Representations of multispectral data

- A *true color* image is created by using the Red (3), Green (2) and Blue (1) Band and mapping these to RGB
- A *false color* image is created by mapping other bands to RGB

:::{.notes}
- True color: what our eyes would see if we were there
- False color: reveals information not visible to human eye
- NIR false color is very common - vegetation appears red because it reflects strongly in NIR
- Different false color combinations highlight different features (water, urban areas, etc.)
:::


```{r}
#| label: fig-rgb-nirgb
#| layout-ncol: 2
#| column: page
#| fig-cap:
#|   - The R, G and B bands mapped to RGB
#|   - NIR, G and B bands mapped to RGB
#| echo: false
plotRGB(l7_full[[c(3,2,1)]], stretch = "histogram", smooth = FALSE)


plotRGB(l7_full[[c(4,3,2)]], stretch = "histogram", smooth = FALSE)

```



